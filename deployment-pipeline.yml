# Node.js React Web App to Linux on Azure
# Build a Node.js React app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '67e9d884-3a1c-483a-9cf9-75810cf1b543'

  # Web app name
  webAppName: 'asd-restaurant-online-ordering-system'

  # Environment name
  environmentName: 'asd-restaurant-online-ordering-system'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: asd-restaurant-online-ordering-system'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure Subscription(9)(2e49b830-f424-4ecf-ba3c-cb066bbc414f)'
              appType: 'webApp'
              WebAppName: 'windows-restaurant-online-ordering-system'
              deployToSlotOrASE: true
              ResourceGroupName: 'restaurant-online-ordering-system'
              SlotName: 'production'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              ScriptType: 'Inline Script'
              InlineScript: |
                npm install
                npm run build --if-present